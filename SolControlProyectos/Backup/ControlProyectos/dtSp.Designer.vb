'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.9148
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dtSp"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtSp
    Inherits Global.System.Data.DataSet
    
    Private tablep_Carteratotalc_sRecibo As p_Carteratotalc_sReciboDataTable
    
    Private tablep_EstimacionCobrosxSector As p_EstimacionCobrosxSectorDataTable
    
    Private tablep_EstimacionCobrosxSectorGob As p_EstimacionCobrosxSectorGobDataTable
    
    Private tablep_EstimacionCobrosxtramites As p_EstimacionCobrosxtramitesDataTable
    
    Private tablep_Carteratotalc_sR_sRecibo_Res As p_Carteratotalc_sR_sRecibo_ResDataTable
    
    Private tablep_EstimacionCobrosxtramites_All As p_EstimacionCobrosxtramites_AllDataTable
    
    Private tablep_EstimacionCobrosxtramites_Resumen As p_EstimacionCobrosxtramites_ResumenDataTable
    
    Private tableDataTable1 As DataTable1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("p_Carteratotalc_sRecibo")) Is Nothing) Then
                MyBase.Tables.Add(New p_Carteratotalc_sReciboDataTable(ds.Tables("p_Carteratotalc_sRecibo")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxSector")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxSectorDataTable(ds.Tables("p_EstimacionCobrosxSector")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxSectorGob")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxSectorGobDataTable(ds.Tables("p_EstimacionCobrosxSectorGob")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxtramites")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxtramitesDataTable(ds.Tables("p_EstimacionCobrosxtramites")))
            End If
            If (Not (ds.Tables("p_Carteratotalc_sR_sRecibo_Res")) Is Nothing) Then
                MyBase.Tables.Add(New p_Carteratotalc_sR_sRecibo_ResDataTable(ds.Tables("p_Carteratotalc_sR_sRecibo_Res")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxtramites_All")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxtramites_AllDataTable(ds.Tables("p_EstimacionCobrosxtramites_All")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxtramites_Resumen")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxtramites_ResumenDataTable(ds.Tables("p_EstimacionCobrosxtramites_Resumen")))
            End If
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_Carteratotalc_sRecibo() As p_Carteratotalc_sReciboDataTable
        Get
            Return Me.tablep_Carteratotalc_sRecibo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_EstimacionCobrosxSector() As p_EstimacionCobrosxSectorDataTable
        Get
            Return Me.tablep_EstimacionCobrosxSector
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_EstimacionCobrosxSectorGob() As p_EstimacionCobrosxSectorGobDataTable
        Get
            Return Me.tablep_EstimacionCobrosxSectorGob
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_EstimacionCobrosxtramites() As p_EstimacionCobrosxtramitesDataTable
        Get
            Return Me.tablep_EstimacionCobrosxtramites
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_Carteratotalc_sR_sRecibo_Res() As p_Carteratotalc_sR_sRecibo_ResDataTable
        Get
            Return Me.tablep_Carteratotalc_sR_sRecibo_Res
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_EstimacionCobrosxtramites_All() As p_EstimacionCobrosxtramites_AllDataTable
        Get
            Return Me.tablep_EstimacionCobrosxtramites_All
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property p_EstimacionCobrosxtramites_Resumen() As p_EstimacionCobrosxtramites_ResumenDataTable
        Get
            Return Me.tablep_EstimacionCobrosxtramites_Resumen
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable1() As DataTable1DataTable
        Get
            Return Me.tableDataTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dtSp = CType(MyBase.Clone,dtSp)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("p_Carteratotalc_sRecibo")) Is Nothing) Then
                MyBase.Tables.Add(New p_Carteratotalc_sReciboDataTable(ds.Tables("p_Carteratotalc_sRecibo")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxSector")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxSectorDataTable(ds.Tables("p_EstimacionCobrosxSector")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxSectorGob")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxSectorGobDataTable(ds.Tables("p_EstimacionCobrosxSectorGob")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxtramites")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxtramitesDataTable(ds.Tables("p_EstimacionCobrosxtramites")))
            End If
            If (Not (ds.Tables("p_Carteratotalc_sR_sRecibo_Res")) Is Nothing) Then
                MyBase.Tables.Add(New p_Carteratotalc_sR_sRecibo_ResDataTable(ds.Tables("p_Carteratotalc_sR_sRecibo_Res")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxtramites_All")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxtramites_AllDataTable(ds.Tables("p_EstimacionCobrosxtramites_All")))
            End If
            If (Not (ds.Tables("p_EstimacionCobrosxtramites_Resumen")) Is Nothing) Then
                MyBase.Tables.Add(New p_EstimacionCobrosxtramites_ResumenDataTable(ds.Tables("p_EstimacionCobrosxtramites_Resumen")))
            End If
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablep_Carteratotalc_sRecibo = CType(MyBase.Tables("p_Carteratotalc_sRecibo"),p_Carteratotalc_sReciboDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_Carteratotalc_sRecibo) Is Nothing) Then
                Me.tablep_Carteratotalc_sRecibo.InitVars
            End If
        End If
        Me.tablep_EstimacionCobrosxSector = CType(MyBase.Tables("p_EstimacionCobrosxSector"),p_EstimacionCobrosxSectorDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_EstimacionCobrosxSector) Is Nothing) Then
                Me.tablep_EstimacionCobrosxSector.InitVars
            End If
        End If
        Me.tablep_EstimacionCobrosxSectorGob = CType(MyBase.Tables("p_EstimacionCobrosxSectorGob"),p_EstimacionCobrosxSectorGobDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_EstimacionCobrosxSectorGob) Is Nothing) Then
                Me.tablep_EstimacionCobrosxSectorGob.InitVars
            End If
        End If
        Me.tablep_EstimacionCobrosxtramites = CType(MyBase.Tables("p_EstimacionCobrosxtramites"),p_EstimacionCobrosxtramitesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_EstimacionCobrosxtramites) Is Nothing) Then
                Me.tablep_EstimacionCobrosxtramites.InitVars
            End If
        End If
        Me.tablep_Carteratotalc_sR_sRecibo_Res = CType(MyBase.Tables("p_Carteratotalc_sR_sRecibo_Res"),p_Carteratotalc_sR_sRecibo_ResDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_Carteratotalc_sR_sRecibo_Res) Is Nothing) Then
                Me.tablep_Carteratotalc_sR_sRecibo_Res.InitVars
            End If
        End If
        Me.tablep_EstimacionCobrosxtramites_All = CType(MyBase.Tables("p_EstimacionCobrosxtramites_All"),p_EstimacionCobrosxtramites_AllDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_EstimacionCobrosxtramites_All) Is Nothing) Then
                Me.tablep_EstimacionCobrosxtramites_All.InitVars
            End If
        End If
        Me.tablep_EstimacionCobrosxtramites_Resumen = CType(MyBase.Tables("p_EstimacionCobrosxtramites_Resumen"),p_EstimacionCobrosxtramites_ResumenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablep_EstimacionCobrosxtramites_Resumen) Is Nothing) Then
                Me.tablep_EstimacionCobrosxtramites_Resumen.InitVars
            End If
        End If
        Me.tableDataTable1 = CType(MyBase.Tables("DataTable1"),DataTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable1) Is Nothing) Then
                Me.tableDataTable1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtSp"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtSp.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablep_Carteratotalc_sRecibo = New p_Carteratotalc_sReciboDataTable
        MyBase.Tables.Add(Me.tablep_Carteratotalc_sRecibo)
        Me.tablep_EstimacionCobrosxSector = New p_EstimacionCobrosxSectorDataTable
        MyBase.Tables.Add(Me.tablep_EstimacionCobrosxSector)
        Me.tablep_EstimacionCobrosxSectorGob = New p_EstimacionCobrosxSectorGobDataTable
        MyBase.Tables.Add(Me.tablep_EstimacionCobrosxSectorGob)
        Me.tablep_EstimacionCobrosxtramites = New p_EstimacionCobrosxtramitesDataTable
        MyBase.Tables.Add(Me.tablep_EstimacionCobrosxtramites)
        Me.tablep_Carteratotalc_sR_sRecibo_Res = New p_Carteratotalc_sR_sRecibo_ResDataTable
        MyBase.Tables.Add(Me.tablep_Carteratotalc_sR_sRecibo_Res)
        Me.tablep_EstimacionCobrosxtramites_All = New p_EstimacionCobrosxtramites_AllDataTable
        MyBase.Tables.Add(Me.tablep_EstimacionCobrosxtramites_All)
        Me.tablep_EstimacionCobrosxtramites_Resumen = New p_EstimacionCobrosxtramites_ResumenDataTable
        MyBase.Tables.Add(Me.tablep_EstimacionCobrosxtramites_Resumen)
        Me.tableDataTable1 = New DataTable1DataTable
        MyBase.Tables.Add(Me.tableDataTable1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_Carteratotalc_sRecibo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_EstimacionCobrosxSector() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_EstimacionCobrosxSectorGob() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_EstimacionCobrosxtramites() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_Carteratotalc_sR_sRecibo_Res() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_EstimacionCobrosxtramites_All() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializep_EstimacionCobrosxtramites_Resumen() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtSp = New dtSp
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub p_Carteratotalc_sReciboRowChangeEventHandler(ByVal sender As Object, ByVal e As p_Carteratotalc_sReciboRowChangeEvent)
    
    Public Delegate Sub p_EstimacionCobrosxSectorRowChangeEventHandler(ByVal sender As Object, ByVal e As p_EstimacionCobrosxSectorRowChangeEvent)
    
    Public Delegate Sub p_EstimacionCobrosxSectorGobRowChangeEventHandler(ByVal sender As Object, ByVal e As p_EstimacionCobrosxSectorGobRowChangeEvent)
    
    Public Delegate Sub p_EstimacionCobrosxtramitesRowChangeEventHandler(ByVal sender As Object, ByVal e As p_EstimacionCobrosxtramitesRowChangeEvent)
    
    Public Delegate Sub p_Carteratotalc_sR_sRecibo_ResRowChangeEventHandler(ByVal sender As Object, ByVal e As p_Carteratotalc_sR_sRecibo_ResRowChangeEvent)
    
    Public Delegate Sub p_EstimacionCobrosxtramites_AllRowChangeEventHandler(ByVal sender As Object, ByVal e As p_EstimacionCobrosxtramites_AllRowChangeEvent)
    
    Public Delegate Sub p_EstimacionCobrosxtramites_ResumenRowChangeEventHandler(ByVal sender As Object, ByVal e As p_EstimacionCobrosxtramites_ResumenRowChangeEvent)
    
    Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_Carteratotalc_sReciboDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_Carteratotalc_sReciboRow)
        
        Private columnpro_nroProyecto As Global.System.Data.DataColumn
        
        Private columnpro_descripcion As Global.System.Data.DataColumn
        
        Private columnpro_DescripcionCliente As Global.System.Data.DataColumn
        
        Private columnpro_codCliente As Global.System.Data.DataColumn
        
        Private columnSector As Global.System.Data.DataColumn
        
        Private columnpro_idProyecto As Global.System.Data.DataColumn
        
        Private columnpro_NroContrato As Global.System.Data.DataColumn
        
        Private columnpro_NroFactura As Global.System.Data.DataColumn
        
        Private columnpro_NroRecibo As Global.System.Data.DataColumn
        
        Private columnCuentaCobrar As Global.System.Data.DataColumn
        
        Private columnMontoPago As Global.System.Data.DataColumn
        
        Private columnRecibo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_Carteratotalc_sRecibo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_nroProyectoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_nroProyecto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_descripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_descripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_DescripcionClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_DescripcionCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_codClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_codCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_idProyectoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_idProyecto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_NroContratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_NroContrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_NroFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_NroFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pro_NroReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpro_NroRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaCobrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCuentaCobrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_Carteratotalc_sReciboRow
            Get
                Return CType(Me.Rows(index),p_Carteratotalc_sReciboRow)
            End Get
        End Property
        
        Public Event p_Carteratotalc_sReciboRowChanging As p_Carteratotalc_sReciboRowChangeEventHandler
        
        Public Event p_Carteratotalc_sReciboRowChanged As p_Carteratotalc_sReciboRowChangeEventHandler
        
        Public Event p_Carteratotalc_sReciboRowDeleting As p_Carteratotalc_sReciboRowChangeEventHandler
        
        Public Event p_Carteratotalc_sReciboRowDeleted As p_Carteratotalc_sReciboRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_Carteratotalc_sReciboRow(ByVal row As p_Carteratotalc_sReciboRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_Carteratotalc_sReciboRow(ByVal pro_nroProyecto As String, ByVal pro_descripcion As String, ByVal pro_DescripcionCliente As String, ByVal pro_codCliente As String, ByVal Sector As String, ByVal pro_idProyecto As Double, ByVal pro_NroContrato As String, ByVal pro_NroFactura As String, ByVal pro_NroRecibo As String, ByVal CuentaCobrar As Decimal, ByVal MontoPago As Decimal, ByVal Recibo As String) As p_Carteratotalc_sReciboRow
            Dim rowp_Carteratotalc_sReciboRow As p_Carteratotalc_sReciboRow = CType(Me.NewRow,p_Carteratotalc_sReciboRow)
            Dim columnValuesArray() As Object = New Object() {pro_nroProyecto, pro_descripcion, pro_DescripcionCliente, pro_codCliente, Sector, pro_idProyecto, pro_NroContrato, pro_NroFactura, pro_NroRecibo, CuentaCobrar, MontoPago, Recibo}
            rowp_Carteratotalc_sReciboRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_Carteratotalc_sReciboRow)
            Return rowp_Carteratotalc_sReciboRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_Carteratotalc_sReciboDataTable = CType(MyBase.Clone,p_Carteratotalc_sReciboDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_Carteratotalc_sReciboDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpro_nroProyecto = MyBase.Columns("pro_nroProyecto")
            Me.columnpro_descripcion = MyBase.Columns("pro_descripcion")
            Me.columnpro_DescripcionCliente = MyBase.Columns("pro_DescripcionCliente")
            Me.columnpro_codCliente = MyBase.Columns("pro_codCliente")
            Me.columnSector = MyBase.Columns("Sector")
            Me.columnpro_idProyecto = MyBase.Columns("pro_idProyecto")
            Me.columnpro_NroContrato = MyBase.Columns("pro_NroContrato")
            Me.columnpro_NroFactura = MyBase.Columns("pro_NroFactura")
            Me.columnpro_NroRecibo = MyBase.Columns("pro_NroRecibo")
            Me.columnCuentaCobrar = MyBase.Columns("CuentaCobrar")
            Me.columnMontoPago = MyBase.Columns("MontoPago")
            Me.columnRecibo = MyBase.Columns("Recibo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpro_nroProyecto = New Global.System.Data.DataColumn("pro_nroProyecto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_nroProyecto)
            Me.columnpro_descripcion = New Global.System.Data.DataColumn("pro_descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_descripcion)
            Me.columnpro_DescripcionCliente = New Global.System.Data.DataColumn("pro_DescripcionCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_DescripcionCliente)
            Me.columnpro_codCliente = New Global.System.Data.DataColumn("pro_codCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_codCliente)
            Me.columnSector = New Global.System.Data.DataColumn("Sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSector)
            Me.columnpro_idProyecto = New Global.System.Data.DataColumn("pro_idProyecto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_idProyecto)
            Me.columnpro_NroContrato = New Global.System.Data.DataColumn("pro_NroContrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_NroContrato)
            Me.columnpro_NroFactura = New Global.System.Data.DataColumn("pro_NroFactura", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_NroFactura)
            Me.columnpro_NroRecibo = New Global.System.Data.DataColumn("pro_NroRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpro_NroRecibo)
            Me.columnCuentaCobrar = New Global.System.Data.DataColumn("CuentaCobrar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaCobrar)
            Me.columnMontoPago = New Global.System.Data.DataColumn("MontoPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoPago)
            Me.columnRecibo = New Global.System.Data.DataColumn("Recibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecibo)
            Me.columnpro_nroProyecto.MaxLength = 8
            Me.columnpro_descripcion.MaxLength = 300
            Me.columnpro_DescripcionCliente.MaxLength = 100
            Me.columnpro_codCliente.MaxLength = 20
            Me.columnSector.ReadOnly = true
            Me.columnSector.MaxLength = 10
            Me.columnpro_idProyecto.AllowDBNull = false
            Me.columnpro_NroContrato.MaxLength = 50
            Me.columnpro_NroFactura.MaxLength = 50
            Me.columnpro_NroRecibo.MaxLength = 50
            Me.columnCuentaCobrar.ReadOnly = true
            Me.columnMontoPago.ReadOnly = true
            Me.columnRecibo.ReadOnly = true
            Me.columnRecibo.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_Carteratotalc_sReciboRow() As p_Carteratotalc_sReciboRow
            Return CType(Me.NewRow,p_Carteratotalc_sReciboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_Carteratotalc_sReciboRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_Carteratotalc_sReciboRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_Carteratotalc_sReciboRowChangedEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sReciboRowChanged(Me, New p_Carteratotalc_sReciboRowChangeEvent(CType(e.Row,p_Carteratotalc_sReciboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_Carteratotalc_sReciboRowChangingEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sReciboRowChanging(Me, New p_Carteratotalc_sReciboRowChangeEvent(CType(e.Row,p_Carteratotalc_sReciboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_Carteratotalc_sReciboRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sReciboRowDeleted(Me, New p_Carteratotalc_sReciboRowChangeEvent(CType(e.Row,p_Carteratotalc_sReciboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_Carteratotalc_sReciboRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sReciboRowDeleting(Me, New p_Carteratotalc_sReciboRowChangeEvent(CType(e.Row,p_Carteratotalc_sReciboRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_Carteratotalc_sReciboRow(ByVal row As p_Carteratotalc_sReciboRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_Carteratotalc_sReciboDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_EstimacionCobrosxSectorDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_EstimacionCobrosxSectorRow)
        
        Private columnnumeroProy As Global.System.Data.DataColumn
        
        Private columndescripcionProy As Global.System.Data.DataColumn
        
        Private columncliente As Global.System.Data.DataColumn
        
        Private columnsector As Global.System.Data.DataColumn
        
        Private columnanosAnt As Global.System.Data.DataColumn
        
        Private column1 As Global.System.Data.DataColumn
        
        Private column2 As Global.System.Data.DataColumn
        
        Private column3 As Global.System.Data.DataColumn
        
        Private column4 As Global.System.Data.DataColumn
        
        Private column5 As Global.System.Data.DataColumn
        
        Private column6 As Global.System.Data.DataColumn
        
        Private column7 As Global.System.Data.DataColumn
        
        Private column8 As Global.System.Data.DataColumn
        
        Private column9 As Global.System.Data.DataColumn
        
        Private column10 As Global.System.Data.DataColumn
        
        Private column11 As Global.System.Data.DataColumn
        
        Private column12 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_EstimacionCobrosxSector"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anosAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnanosAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1Column() As Global.System.Data.DataColumn
            Get
                Return Me.column1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2Column() As Global.System.Data.DataColumn
            Get
                Return Me.column2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _3Column() As Global.System.Data.DataColumn
            Get
                Return Me.column3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _4Column() As Global.System.Data.DataColumn
            Get
                Return Me.column4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _5Column() As Global.System.Data.DataColumn
            Get
                Return Me.column5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _6Column() As Global.System.Data.DataColumn
            Get
                Return Me.column6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _7Column() As Global.System.Data.DataColumn
            Get
                Return Me.column7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _8Column() As Global.System.Data.DataColumn
            Get
                Return Me.column8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _9Column() As Global.System.Data.DataColumn
            Get
                Return Me.column9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _10Column() As Global.System.Data.DataColumn
            Get
                Return Me.column10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _11Column() As Global.System.Data.DataColumn
            Get
                Return Me.column11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _12Column() As Global.System.Data.DataColumn
            Get
                Return Me.column12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_EstimacionCobrosxSectorRow
            Get
                Return CType(Me.Rows(index),p_EstimacionCobrosxSectorRow)
            End Get
        End Property
        
        Public Event p_EstimacionCobrosxSectorRowChanging As p_EstimacionCobrosxSectorRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxSectorRowChanged As p_EstimacionCobrosxSectorRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxSectorRowDeleting As p_EstimacionCobrosxSectorRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxSectorRowDeleted As p_EstimacionCobrosxSectorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_EstimacionCobrosxSectorRow(ByVal row As p_EstimacionCobrosxSectorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_EstimacionCobrosxSectorRow( _
                    ByVal numeroProy As String,  _
                    ByVal descripcionProy As String,  _
                    ByVal cliente As String,  _
                    ByVal sector As String,  _
                    ByVal anosAnt As Decimal,  _
                    ByVal _1 As Decimal,  _
                    ByVal _2 As Decimal,  _
                    ByVal _3 As Decimal,  _
                    ByVal _4 As Decimal,  _
                    ByVal _5 As Decimal,  _
                    ByVal _6 As Decimal,  _
                    ByVal _7 As Decimal,  _
                    ByVal _8 As Decimal,  _
                    ByVal _9 As Decimal,  _
                    ByVal _10 As Decimal,  _
                    ByVal _11 As Decimal,  _
                    ByVal _12 As Decimal) As p_EstimacionCobrosxSectorRow
            Dim rowp_EstimacionCobrosxSectorRow As p_EstimacionCobrosxSectorRow = CType(Me.NewRow,p_EstimacionCobrosxSectorRow)
            Dim columnValuesArray() As Object = New Object() {numeroProy, descripcionProy, cliente, sector, anosAnt, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12}
            rowp_EstimacionCobrosxSectorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_EstimacionCobrosxSectorRow)
            Return rowp_EstimacionCobrosxSectorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_EstimacionCobrosxSectorDataTable = CType(MyBase.Clone,p_EstimacionCobrosxSectorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_EstimacionCobrosxSectorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumeroProy = MyBase.Columns("numeroProy")
            Me.columndescripcionProy = MyBase.Columns("descripcionProy")
            Me.columncliente = MyBase.Columns("cliente")
            Me.columnsector = MyBase.Columns("sector")
            Me.columnanosAnt = MyBase.Columns("anosAnt")
            Me.column1 = MyBase.Columns("1")
            Me.column2 = MyBase.Columns("2")
            Me.column3 = MyBase.Columns("3")
            Me.column4 = MyBase.Columns("4")
            Me.column5 = MyBase.Columns("5")
            Me.column6 = MyBase.Columns("6")
            Me.column7 = MyBase.Columns("7")
            Me.column8 = MyBase.Columns("8")
            Me.column9 = MyBase.Columns("9")
            Me.column10 = MyBase.Columns("10")
            Me.column11 = MyBase.Columns("11")
            Me.column12 = MyBase.Columns("12")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumeroProy = New Global.System.Data.DataColumn("numeroProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroProy)
            Me.columndescripcionProy = New Global.System.Data.DataColumn("descripcionProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionProy)
            Me.columncliente = New Global.System.Data.DataColumn("cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncliente)
            Me.columnsector = New Global.System.Data.DataColumn("sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsector)
            Me.columnanosAnt = New Global.System.Data.DataColumn("anosAnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnanosAnt)
            Me.column1 = New Global.System.Data.DataColumn("1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column1.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column1")
            Me.column1.ExtendedProperties.Add("Generator_UserColumnName", "1")
            MyBase.Columns.Add(Me.column1)
            Me.column2 = New Global.System.Data.DataColumn("2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column2")
            Me.column2.ExtendedProperties.Add("Generator_UserColumnName", "2")
            MyBase.Columns.Add(Me.column2)
            Me.column3 = New Global.System.Data.DataColumn("3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column3.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column3")
            Me.column3.ExtendedProperties.Add("Generator_UserColumnName", "3")
            MyBase.Columns.Add(Me.column3)
            Me.column4 = New Global.System.Data.DataColumn("4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column4")
            Me.column4.ExtendedProperties.Add("Generator_UserColumnName", "4")
            MyBase.Columns.Add(Me.column4)
            Me.column5 = New Global.System.Data.DataColumn("5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column5")
            Me.column5.ExtendedProperties.Add("Generator_UserColumnName", "5")
            MyBase.Columns.Add(Me.column5)
            Me.column6 = New Global.System.Data.DataColumn("6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column6")
            Me.column6.ExtendedProperties.Add("Generator_UserColumnName", "6")
            MyBase.Columns.Add(Me.column6)
            Me.column7 = New Global.System.Data.DataColumn("7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column7.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column7")
            Me.column7.ExtendedProperties.Add("Generator_UserColumnName", "7")
            MyBase.Columns.Add(Me.column7)
            Me.column8 = New Global.System.Data.DataColumn("8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column8.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column8")
            Me.column8.ExtendedProperties.Add("Generator_UserColumnName", "8")
            MyBase.Columns.Add(Me.column8)
            Me.column9 = New Global.System.Data.DataColumn("9", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column9.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column9")
            Me.column9.ExtendedProperties.Add("Generator_UserColumnName", "9")
            MyBase.Columns.Add(Me.column9)
            Me.column10 = New Global.System.Data.DataColumn("10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column10.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column10")
            Me.column10.ExtendedProperties.Add("Generator_UserColumnName", "10")
            MyBase.Columns.Add(Me.column10)
            Me.column11 = New Global.System.Data.DataColumn("11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column11.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column11")
            Me.column11.ExtendedProperties.Add("Generator_UserColumnName", "11")
            MyBase.Columns.Add(Me.column11)
            Me.column12 = New Global.System.Data.DataColumn("12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me.column12.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column12")
            Me.column12.ExtendedProperties.Add("Generator_UserColumnName", "12")
            MyBase.Columns.Add(Me.column12)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_EstimacionCobrosxSectorRow() As p_EstimacionCobrosxSectorRow
            Return CType(Me.NewRow,p_EstimacionCobrosxSectorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_EstimacionCobrosxSectorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_EstimacionCobrosxSectorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_EstimacionCobrosxSectorRowChangedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorRowChanged(Me, New p_EstimacionCobrosxSectorRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_EstimacionCobrosxSectorRowChangingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorRowChanging(Me, New p_EstimacionCobrosxSectorRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_EstimacionCobrosxSectorRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorRowDeleted(Me, New p_EstimacionCobrosxSectorRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_EstimacionCobrosxSectorRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorRowDeleting(Me, New p_EstimacionCobrosxSectorRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_EstimacionCobrosxSectorRow(ByVal row As p_EstimacionCobrosxSectorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_EstimacionCobrosxSectorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_EstimacionCobrosxSectorGobDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_EstimacionCobrosxSectorGobRow)
        
        Private columnnumeroProy As Global.System.Data.DataColumn
        
        Private columndescripcionProy As Global.System.Data.DataColumn
        
        Private columncliente As Global.System.Data.DataColumn
        
        Private columnsector As Global.System.Data.DataColumn
        
        Private columnanosAnt As Global.System.Data.DataColumn
        
        Private columnserieCuenta As Global.System.Data.DataColumn
        
        Private columnnumeroCont As Global.System.Data.DataColumn
        
        Private columnfechaR As Global.System.Data.DataColumn
        
        Private columnstatusproy As Global.System.Data.DataColumn
        
        Private columnnroRecibo As Global.System.Data.DataColumn
        
        Private columnEnero As Global.System.Data.DataColumn
        
        Private columnFebr As Global.System.Data.DataColumn
        
        Private columnMarzo As Global.System.Data.DataColumn
        
        Private columnAbril As Global.System.Data.DataColumn
        
        Private columnMayo As Global.System.Data.DataColumn
        
        Private columnJunio As Global.System.Data.DataColumn
        
        Private columnJulio As Global.System.Data.DataColumn
        
        Private columnAgosto As Global.System.Data.DataColumn
        
        Private columnSept As Global.System.Data.DataColumn
        
        Private columnOct As Global.System.Data.DataColumn
        
        Private columnNov As Global.System.Data.DataColumn
        
        Private columnDic As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_EstimacionCobrosxSectorGob"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anosAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnanosAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroContColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroCont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusproyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatusproy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EneroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FebrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFebr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarzoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarzo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbrilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbril
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MayoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMayo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JunioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJunio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JulioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJulio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSept
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NovColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNov
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_EstimacionCobrosxSectorGobRow
            Get
                Return CType(Me.Rows(index),p_EstimacionCobrosxSectorGobRow)
            End Get
        End Property
        
        Public Event p_EstimacionCobrosxSectorGobRowChanging As p_EstimacionCobrosxSectorGobRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxSectorGobRowChanged As p_EstimacionCobrosxSectorGobRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxSectorGobRowDeleting As p_EstimacionCobrosxSectorGobRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxSectorGobRowDeleted As p_EstimacionCobrosxSectorGobRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_EstimacionCobrosxSectorGobRow(ByVal row As p_EstimacionCobrosxSectorGobRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_EstimacionCobrosxSectorGobRow( _
                    ByVal numeroProy As String,  _
                    ByVal descripcionProy As String,  _
                    ByVal cliente As String,  _
                    ByVal sector As String,  _
                    ByVal anosAnt As Decimal,  _
                    ByVal serieCuenta As String,  _
                    ByVal numeroCont As String,  _
                    ByVal fechaR As String,  _
                    ByVal statusproy As String,  _
                    ByVal nroRecibo As String,  _
                    ByVal Enero As Decimal,  _
                    ByVal Febr As Decimal,  _
                    ByVal Marzo As Decimal,  _
                    ByVal Abril As Decimal,  _
                    ByVal Mayo As Decimal,  _
                    ByVal Junio As Decimal,  _
                    ByVal Julio As Decimal,  _
                    ByVal Agosto As Decimal,  _
                    ByVal Sept As Decimal,  _
                    ByVal Oct As Decimal,  _
                    ByVal Nov As Decimal,  _
                    ByVal Dic As Decimal) As p_EstimacionCobrosxSectorGobRow
            Dim rowp_EstimacionCobrosxSectorGobRow As p_EstimacionCobrosxSectorGobRow = CType(Me.NewRow,p_EstimacionCobrosxSectorGobRow)
            Dim columnValuesArray() As Object = New Object() {numeroProy, descripcionProy, cliente, sector, anosAnt, serieCuenta, numeroCont, fechaR, statusproy, nroRecibo, Enero, Febr, Marzo, Abril, Mayo, Junio, Julio, Agosto, Sept, Oct, Nov, Dic}
            rowp_EstimacionCobrosxSectorGobRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_EstimacionCobrosxSectorGobRow)
            Return rowp_EstimacionCobrosxSectorGobRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_EstimacionCobrosxSectorGobDataTable = CType(MyBase.Clone,p_EstimacionCobrosxSectorGobDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_EstimacionCobrosxSectorGobDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumeroProy = MyBase.Columns("numeroProy")
            Me.columndescripcionProy = MyBase.Columns("descripcionProy")
            Me.columncliente = MyBase.Columns("cliente")
            Me.columnsector = MyBase.Columns("sector")
            Me.columnanosAnt = MyBase.Columns("anosAnt")
            Me.columnserieCuenta = MyBase.Columns("serieCuenta")
            Me.columnnumeroCont = MyBase.Columns("numeroCont")
            Me.columnfechaR = MyBase.Columns("fechaR")
            Me.columnstatusproy = MyBase.Columns("statusproy")
            Me.columnnroRecibo = MyBase.Columns("nroRecibo")
            Me.columnEnero = MyBase.Columns("Enero")
            Me.columnFebr = MyBase.Columns("Febr")
            Me.columnMarzo = MyBase.Columns("Marzo")
            Me.columnAbril = MyBase.Columns("Abril")
            Me.columnMayo = MyBase.Columns("Mayo")
            Me.columnJunio = MyBase.Columns("Junio")
            Me.columnJulio = MyBase.Columns("Julio")
            Me.columnAgosto = MyBase.Columns("Agosto")
            Me.columnSept = MyBase.Columns("Sept")
            Me.columnOct = MyBase.Columns("Oct")
            Me.columnNov = MyBase.Columns("Nov")
            Me.columnDic = MyBase.Columns("Dic")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumeroProy = New Global.System.Data.DataColumn("numeroProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroProy)
            Me.columndescripcionProy = New Global.System.Data.DataColumn("descripcionProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionProy)
            Me.columncliente = New Global.System.Data.DataColumn("cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncliente)
            Me.columnsector = New Global.System.Data.DataColumn("sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsector)
            Me.columnanosAnt = New Global.System.Data.DataColumn("anosAnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnanosAnt)
            Me.columnserieCuenta = New Global.System.Data.DataColumn("serieCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieCuenta)
            Me.columnnumeroCont = New Global.System.Data.DataColumn("numeroCont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroCont)
            Me.columnfechaR = New Global.System.Data.DataColumn("fechaR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaR)
            Me.columnstatusproy = New Global.System.Data.DataColumn("statusproy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatusproy)
            Me.columnnroRecibo = New Global.System.Data.DataColumn("nroRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroRecibo)
            Me.columnEnero = New Global.System.Data.DataColumn("Enero", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnero)
            Me.columnFebr = New Global.System.Data.DataColumn("Febr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFebr)
            Me.columnMarzo = New Global.System.Data.DataColumn("Marzo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarzo)
            Me.columnAbril = New Global.System.Data.DataColumn("Abril", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbril)
            Me.columnMayo = New Global.System.Data.DataColumn("Mayo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMayo)
            Me.columnJunio = New Global.System.Data.DataColumn("Junio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJunio)
            Me.columnJulio = New Global.System.Data.DataColumn("Julio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJulio)
            Me.columnAgosto = New Global.System.Data.DataColumn("Agosto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgosto)
            Me.columnSept = New Global.System.Data.DataColumn("Sept", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSept)
            Me.columnOct = New Global.System.Data.DataColumn("Oct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOct)
            Me.columnNov = New Global.System.Data.DataColumn("Nov", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNov)
            Me.columnDic = New Global.System.Data.DataColumn("Dic", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDic)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_EstimacionCobrosxSectorGobRow() As p_EstimacionCobrosxSectorGobRow
            Return CType(Me.NewRow,p_EstimacionCobrosxSectorGobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_EstimacionCobrosxSectorGobRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_EstimacionCobrosxSectorGobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_EstimacionCobrosxSectorGobRowChangedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorGobRowChanged(Me, New p_EstimacionCobrosxSectorGobRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorGobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_EstimacionCobrosxSectorGobRowChangingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorGobRowChanging(Me, New p_EstimacionCobrosxSectorGobRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorGobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_EstimacionCobrosxSectorGobRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorGobRowDeleted(Me, New p_EstimacionCobrosxSectorGobRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorGobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_EstimacionCobrosxSectorGobRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxSectorGobRowDeleting(Me, New p_EstimacionCobrosxSectorGobRowChangeEvent(CType(e.Row,p_EstimacionCobrosxSectorGobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_EstimacionCobrosxSectorGobRow(ByVal row As p_EstimacionCobrosxSectorGobRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_EstimacionCobrosxSectorGobDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_EstimacionCobrosxtramitesDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_EstimacionCobrosxtramitesRow)
        
        Private columnnumeroProy As Global.System.Data.DataColumn
        
        Private columndescripcionProy As Global.System.Data.DataColumn
        
        Private columncliente As Global.System.Data.DataColumn
        
        Private columnsector As Global.System.Data.DataColumn
        
        Private columnanosAnt As Global.System.Data.DataColumn
        
        Private columnserieCuenta As Global.System.Data.DataColumn
        
        Private columnnumeroCont As Global.System.Data.DataColumn
        
        Private columnfechaR As Global.System.Data.DataColumn
        
        Private columnstatusproy As Global.System.Data.DataColumn
        
        Private columnnroRecibo As Global.System.Data.DataColumn
        
        Private columnEnero As Global.System.Data.DataColumn
        
        Private columnFebr As Global.System.Data.DataColumn
        
        Private columnMarzo As Global.System.Data.DataColumn
        
        Private columnAbril As Global.System.Data.DataColumn
        
        Private columnMayo As Global.System.Data.DataColumn
        
        Private columnJunio As Global.System.Data.DataColumn
        
        Private columnJulio As Global.System.Data.DataColumn
        
        Private columnAgosto As Global.System.Data.DataColumn
        
        Private columnSept As Global.System.Data.DataColumn
        
        Private columnOct As Global.System.Data.DataColumn
        
        Private columnNov As Global.System.Data.DataColumn
        
        Private columnDic As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_EstimacionCobrosxtramites"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anosAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnanosAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroContColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroCont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusproyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatusproy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EneroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FebrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFebr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarzoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarzo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbrilColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbril
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MayoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMayo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JunioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJunio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JulioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJulio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSept
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NovColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNov
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_EstimacionCobrosxtramitesRow
            Get
                Return CType(Me.Rows(index),p_EstimacionCobrosxtramitesRow)
            End Get
        End Property
        
        Public Event p_EstimacionCobrosxtramitesRowChanging As p_EstimacionCobrosxtramitesRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramitesRowChanged As p_EstimacionCobrosxtramitesRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramitesRowDeleting As p_EstimacionCobrosxtramitesRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramitesRowDeleted As p_EstimacionCobrosxtramitesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_EstimacionCobrosxtramitesRow(ByVal row As p_EstimacionCobrosxtramitesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_EstimacionCobrosxtramitesRow( _
                    ByVal numeroProy As String,  _
                    ByVal descripcionProy As String,  _
                    ByVal cliente As String,  _
                    ByVal sector As String,  _
                    ByVal anosAnt As Decimal,  _
                    ByVal serieCuenta As String,  _
                    ByVal numeroCont As String,  _
                    ByVal fechaR As String,  _
                    ByVal statusproy As String,  _
                    ByVal nroRecibo As String,  _
                    ByVal Enero As Decimal,  _
                    ByVal Febr As Decimal,  _
                    ByVal Marzo As Decimal,  _
                    ByVal Abril As Decimal,  _
                    ByVal Mayo As Decimal,  _
                    ByVal Junio As Decimal,  _
                    ByVal Julio As Decimal,  _
                    ByVal Agosto As Decimal,  _
                    ByVal Sept As Decimal,  _
                    ByVal Oct As Decimal,  _
                    ByVal Nov As Decimal,  _
                    ByVal Dic As Decimal) As p_EstimacionCobrosxtramitesRow
            Dim rowp_EstimacionCobrosxtramitesRow As p_EstimacionCobrosxtramitesRow = CType(Me.NewRow,p_EstimacionCobrosxtramitesRow)
            Dim columnValuesArray() As Object = New Object() {numeroProy, descripcionProy, cliente, sector, anosAnt, serieCuenta, numeroCont, fechaR, statusproy, nroRecibo, Enero, Febr, Marzo, Abril, Mayo, Junio, Julio, Agosto, Sept, Oct, Nov, Dic}
            rowp_EstimacionCobrosxtramitesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_EstimacionCobrosxtramitesRow)
            Return rowp_EstimacionCobrosxtramitesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_EstimacionCobrosxtramitesDataTable = CType(MyBase.Clone,p_EstimacionCobrosxtramitesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_EstimacionCobrosxtramitesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumeroProy = MyBase.Columns("numeroProy")
            Me.columndescripcionProy = MyBase.Columns("descripcionProy")
            Me.columncliente = MyBase.Columns("cliente")
            Me.columnsector = MyBase.Columns("sector")
            Me.columnanosAnt = MyBase.Columns("anosAnt")
            Me.columnserieCuenta = MyBase.Columns("serieCuenta")
            Me.columnnumeroCont = MyBase.Columns("numeroCont")
            Me.columnfechaR = MyBase.Columns("fechaR")
            Me.columnstatusproy = MyBase.Columns("statusproy")
            Me.columnnroRecibo = MyBase.Columns("nroRecibo")
            Me.columnEnero = MyBase.Columns("Enero")
            Me.columnFebr = MyBase.Columns("Febr")
            Me.columnMarzo = MyBase.Columns("Marzo")
            Me.columnAbril = MyBase.Columns("Abril")
            Me.columnMayo = MyBase.Columns("Mayo")
            Me.columnJunio = MyBase.Columns("Junio")
            Me.columnJulio = MyBase.Columns("Julio")
            Me.columnAgosto = MyBase.Columns("Agosto")
            Me.columnSept = MyBase.Columns("Sept")
            Me.columnOct = MyBase.Columns("Oct")
            Me.columnNov = MyBase.Columns("Nov")
            Me.columnDic = MyBase.Columns("Dic")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumeroProy = New Global.System.Data.DataColumn("numeroProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroProy)
            Me.columndescripcionProy = New Global.System.Data.DataColumn("descripcionProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionProy)
            Me.columncliente = New Global.System.Data.DataColumn("cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncliente)
            Me.columnsector = New Global.System.Data.DataColumn("sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsector)
            Me.columnanosAnt = New Global.System.Data.DataColumn("anosAnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnanosAnt)
            Me.columnserieCuenta = New Global.System.Data.DataColumn("serieCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieCuenta)
            Me.columnnumeroCont = New Global.System.Data.DataColumn("numeroCont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroCont)
            Me.columnfechaR = New Global.System.Data.DataColumn("fechaR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaR)
            Me.columnstatusproy = New Global.System.Data.DataColumn("statusproy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatusproy)
            Me.columnnroRecibo = New Global.System.Data.DataColumn("nroRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroRecibo)
            Me.columnEnero = New Global.System.Data.DataColumn("Enero", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnero)
            Me.columnFebr = New Global.System.Data.DataColumn("Febr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFebr)
            Me.columnMarzo = New Global.System.Data.DataColumn("Marzo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarzo)
            Me.columnAbril = New Global.System.Data.DataColumn("Abril", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbril)
            Me.columnMayo = New Global.System.Data.DataColumn("Mayo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMayo)
            Me.columnJunio = New Global.System.Data.DataColumn("Junio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJunio)
            Me.columnJulio = New Global.System.Data.DataColumn("Julio", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJulio)
            Me.columnAgosto = New Global.System.Data.DataColumn("Agosto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgosto)
            Me.columnSept = New Global.System.Data.DataColumn("Sept", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSept)
            Me.columnOct = New Global.System.Data.DataColumn("Oct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOct)
            Me.columnNov = New Global.System.Data.DataColumn("Nov", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNov)
            Me.columnDic = New Global.System.Data.DataColumn("Dic", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDic)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_EstimacionCobrosxtramitesRow() As p_EstimacionCobrosxtramitesRow
            Return CType(Me.NewRow,p_EstimacionCobrosxtramitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_EstimacionCobrosxtramitesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_EstimacionCobrosxtramitesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_EstimacionCobrosxtramitesRowChangedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramitesRowChanged(Me, New p_EstimacionCobrosxtramitesRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_EstimacionCobrosxtramitesRowChangingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramitesRowChanging(Me, New p_EstimacionCobrosxtramitesRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_EstimacionCobrosxtramitesRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramitesRowDeleted(Me, New p_EstimacionCobrosxtramitesRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_EstimacionCobrosxtramitesRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramitesRowDeleting(Me, New p_EstimacionCobrosxtramitesRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramitesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_EstimacionCobrosxtramitesRow(ByVal row As p_EstimacionCobrosxtramitesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_EstimacionCobrosxtramitesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_Carteratotalc_sR_sRecibo_ResDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_Carteratotalc_sR_sRecibo_ResRow)
        
        Private columnSector As Global.System.Data.DataColumn
        
        Private columnRecibo As Global.System.Data.DataColumn
        
        Private columnMontoPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_Carteratotalc_sR_sRecibo_Res"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_Carteratotalc_sR_sRecibo_ResRow
            Get
                Return CType(Me.Rows(index),p_Carteratotalc_sR_sRecibo_ResRow)
            End Get
        End Property
        
        Public Event p_Carteratotalc_sR_sRecibo_ResRowChanging As p_Carteratotalc_sR_sRecibo_ResRowChangeEventHandler
        
        Public Event p_Carteratotalc_sR_sRecibo_ResRowChanged As p_Carteratotalc_sR_sRecibo_ResRowChangeEventHandler
        
        Public Event p_Carteratotalc_sR_sRecibo_ResRowDeleting As p_Carteratotalc_sR_sRecibo_ResRowChangeEventHandler
        
        Public Event p_Carteratotalc_sR_sRecibo_ResRowDeleted As p_Carteratotalc_sR_sRecibo_ResRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_Carteratotalc_sR_sRecibo_ResRow(ByVal row As p_Carteratotalc_sR_sRecibo_ResRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_Carteratotalc_sR_sRecibo_ResRow(ByVal Sector As String, ByVal Recibo As String, ByVal MontoPago As Decimal) As p_Carteratotalc_sR_sRecibo_ResRow
            Dim rowp_Carteratotalc_sR_sRecibo_ResRow As p_Carteratotalc_sR_sRecibo_ResRow = CType(Me.NewRow,p_Carteratotalc_sR_sRecibo_ResRow)
            Dim columnValuesArray() As Object = New Object() {Sector, Recibo, MontoPago}
            rowp_Carteratotalc_sR_sRecibo_ResRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_Carteratotalc_sR_sRecibo_ResRow)
            Return rowp_Carteratotalc_sR_sRecibo_ResRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_Carteratotalc_sR_sRecibo_ResDataTable = CType(MyBase.Clone,p_Carteratotalc_sR_sRecibo_ResDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_Carteratotalc_sR_sRecibo_ResDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSector = MyBase.Columns("Sector")
            Me.columnRecibo = MyBase.Columns("Recibo")
            Me.columnMontoPago = MyBase.Columns("MontoPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSector = New Global.System.Data.DataColumn("Sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSector)
            Me.columnRecibo = New Global.System.Data.DataColumn("Recibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecibo)
            Me.columnMontoPago = New Global.System.Data.DataColumn("MontoPago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoPago)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_Carteratotalc_sR_sRecibo_ResRow() As p_Carteratotalc_sR_sRecibo_ResRow
            Return CType(Me.NewRow,p_Carteratotalc_sR_sRecibo_ResRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_Carteratotalc_sR_sRecibo_ResRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_Carteratotalc_sR_sRecibo_ResRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_Carteratotalc_sR_sRecibo_ResRowChangedEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sR_sRecibo_ResRowChanged(Me, New p_Carteratotalc_sR_sRecibo_ResRowChangeEvent(CType(e.Row,p_Carteratotalc_sR_sRecibo_ResRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_Carteratotalc_sR_sRecibo_ResRowChangingEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sR_sRecibo_ResRowChanging(Me, New p_Carteratotalc_sR_sRecibo_ResRowChangeEvent(CType(e.Row,p_Carteratotalc_sR_sRecibo_ResRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_Carteratotalc_sR_sRecibo_ResRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sR_sRecibo_ResRowDeleted(Me, New p_Carteratotalc_sR_sRecibo_ResRowChangeEvent(CType(e.Row,p_Carteratotalc_sR_sRecibo_ResRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_Carteratotalc_sR_sRecibo_ResRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_Carteratotalc_sR_sRecibo_ResRowDeleting(Me, New p_Carteratotalc_sR_sRecibo_ResRowChangeEvent(CType(e.Row,p_Carteratotalc_sR_sRecibo_ResRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_Carteratotalc_sR_sRecibo_ResRow(ByVal row As p_Carteratotalc_sR_sRecibo_ResRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_Carteratotalc_sR_sRecibo_ResDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_EstimacionCobrosxtramites_AllDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_EstimacionCobrosxtramites_AllRow)
        
        Private columnnumeroProy As Global.System.Data.DataColumn
        
        Private columndescripcionProy As Global.System.Data.DataColumn
        
        Private columncliente As Global.System.Data.DataColumn
        
        Private columnsector As Global.System.Data.DataColumn
        
        Private columnanosAnt As Global.System.Data.DataColumn
        
        Private columnserieCuenta As Global.System.Data.DataColumn
        
        Private columnnumeroCont As Global.System.Data.DataColumn
        
        Private columnfechaR As Global.System.Data.DataColumn
        
        Private columnstatusproy As Global.System.Data.DataColumn
        
        Private columnnroRecibo As Global.System.Data.DataColumn
        
        Private columnEne As Global.System.Data.DataColumn
        
        Private columnFebr As Global.System.Data.DataColumn
        
        Private columnMar As Global.System.Data.DataColumn
        
        Private columnAbr As Global.System.Data.DataColumn
        
        Private columnMay As Global.System.Data.DataColumn
        
        Private columnJun As Global.System.Data.DataColumn
        
        Private columnJul As Global.System.Data.DataColumn
        
        Private columnAgo As Global.System.Data.DataColumn
        
        Private columnSept As Global.System.Data.DataColumn
        
        Private columnOct As Global.System.Data.DataColumn
        
        Private columnNov As Global.System.Data.DataColumn
        
        Private columnDic As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_EstimacionCobrosxtramites_All"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anosAntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnanosAnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroContColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroCont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusproyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatusproy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEne
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FebrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFebr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JunColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JulColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJul
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSept
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OctColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NovColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNov
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DicColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDic
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_EstimacionCobrosxtramites_AllRow
            Get
                Return CType(Me.Rows(index),p_EstimacionCobrosxtramites_AllRow)
            End Get
        End Property
        
        Public Event p_EstimacionCobrosxtramites_AllRowChanging As p_EstimacionCobrosxtramites_AllRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramites_AllRowChanged As p_EstimacionCobrosxtramites_AllRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramites_AllRowDeleting As p_EstimacionCobrosxtramites_AllRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramites_AllRowDeleted As p_EstimacionCobrosxtramites_AllRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_EstimacionCobrosxtramites_AllRow(ByVal row As p_EstimacionCobrosxtramites_AllRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_EstimacionCobrosxtramites_AllRow( _
                    ByVal numeroProy As String,  _
                    ByVal descripcionProy As String,  _
                    ByVal cliente As String,  _
                    ByVal sector As String,  _
                    ByVal anosAnt As Decimal,  _
                    ByVal serieCuenta As String,  _
                    ByVal numeroCont As String,  _
                    ByVal fechaR As String,  _
                    ByVal statusproy As String,  _
                    ByVal nroRecibo As String,  _
                    ByVal Ene As Decimal,  _
                    ByVal Febr As Decimal,  _
                    ByVal Mar As Decimal,  _
                    ByVal Abr As Decimal,  _
                    ByVal May As Decimal,  _
                    ByVal Jun As Decimal,  _
                    ByVal Jul As Decimal,  _
                    ByVal Ago As Decimal,  _
                    ByVal Sept As Decimal,  _
                    ByVal Oct As Decimal,  _
                    ByVal Nov As Decimal,  _
                    ByVal Dic As Decimal,  _
                    ByVal Total As Decimal) As p_EstimacionCobrosxtramites_AllRow
            Dim rowp_EstimacionCobrosxtramites_AllRow As p_EstimacionCobrosxtramites_AllRow = CType(Me.NewRow,p_EstimacionCobrosxtramites_AllRow)
            Dim columnValuesArray() As Object = New Object() {numeroProy, descripcionProy, cliente, sector, anosAnt, serieCuenta, numeroCont, fechaR, statusproy, nroRecibo, Ene, Febr, Mar, Abr, May, Jun, Jul, Ago, Sept, Oct, Nov, Dic, Total}
            rowp_EstimacionCobrosxtramites_AllRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_EstimacionCobrosxtramites_AllRow)
            Return rowp_EstimacionCobrosxtramites_AllRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_EstimacionCobrosxtramites_AllDataTable = CType(MyBase.Clone,p_EstimacionCobrosxtramites_AllDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_EstimacionCobrosxtramites_AllDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumeroProy = MyBase.Columns("numeroProy")
            Me.columndescripcionProy = MyBase.Columns("descripcionProy")
            Me.columncliente = MyBase.Columns("cliente")
            Me.columnsector = MyBase.Columns("sector")
            Me.columnanosAnt = MyBase.Columns("anosAnt")
            Me.columnserieCuenta = MyBase.Columns("serieCuenta")
            Me.columnnumeroCont = MyBase.Columns("numeroCont")
            Me.columnfechaR = MyBase.Columns("fechaR")
            Me.columnstatusproy = MyBase.Columns("statusproy")
            Me.columnnroRecibo = MyBase.Columns("nroRecibo")
            Me.columnEne = MyBase.Columns("Ene")
            Me.columnFebr = MyBase.Columns("Febr")
            Me.columnMar = MyBase.Columns("Mar")
            Me.columnAbr = MyBase.Columns("Abr")
            Me.columnMay = MyBase.Columns("May")
            Me.columnJun = MyBase.Columns("Jun")
            Me.columnJul = MyBase.Columns("Jul")
            Me.columnAgo = MyBase.Columns("Ago")
            Me.columnSept = MyBase.Columns("Sept")
            Me.columnOct = MyBase.Columns("Oct")
            Me.columnNov = MyBase.Columns("Nov")
            Me.columnDic = MyBase.Columns("Dic")
            Me.columnTotal = MyBase.Columns("Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumeroProy = New Global.System.Data.DataColumn("numeroProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroProy)
            Me.columndescripcionProy = New Global.System.Data.DataColumn("descripcionProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionProy)
            Me.columncliente = New Global.System.Data.DataColumn("cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncliente)
            Me.columnsector = New Global.System.Data.DataColumn("sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsector)
            Me.columnanosAnt = New Global.System.Data.DataColumn("anosAnt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnanosAnt)
            Me.columnserieCuenta = New Global.System.Data.DataColumn("serieCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieCuenta)
            Me.columnnumeroCont = New Global.System.Data.DataColumn("numeroCont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroCont)
            Me.columnfechaR = New Global.System.Data.DataColumn("fechaR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaR)
            Me.columnstatusproy = New Global.System.Data.DataColumn("statusproy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatusproy)
            Me.columnnroRecibo = New Global.System.Data.DataColumn("nroRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroRecibo)
            Me.columnEne = New Global.System.Data.DataColumn("Ene", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEne)
            Me.columnFebr = New Global.System.Data.DataColumn("Febr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFebr)
            Me.columnMar = New Global.System.Data.DataColumn("Mar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMar)
            Me.columnAbr = New Global.System.Data.DataColumn("Abr", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbr)
            Me.columnMay = New Global.System.Data.DataColumn("May", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMay)
            Me.columnJun = New Global.System.Data.DataColumn("Jun", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJun)
            Me.columnJul = New Global.System.Data.DataColumn("Jul", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJul)
            Me.columnAgo = New Global.System.Data.DataColumn("Ago", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgo)
            Me.columnSept = New Global.System.Data.DataColumn("Sept", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSept)
            Me.columnOct = New Global.System.Data.DataColumn("Oct", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOct)
            Me.columnNov = New Global.System.Data.DataColumn("Nov", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNov)
            Me.columnDic = New Global.System.Data.DataColumn("Dic", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDic)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_EstimacionCobrosxtramites_AllRow() As p_EstimacionCobrosxtramites_AllRow
            Return CType(Me.NewRow,p_EstimacionCobrosxtramites_AllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_EstimacionCobrosxtramites_AllRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_EstimacionCobrosxtramites_AllRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_EstimacionCobrosxtramites_AllRowChangedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_AllRowChanged(Me, New p_EstimacionCobrosxtramites_AllRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_AllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_EstimacionCobrosxtramites_AllRowChangingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_AllRowChanging(Me, New p_EstimacionCobrosxtramites_AllRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_AllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_EstimacionCobrosxtramites_AllRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_AllRowDeleted(Me, New p_EstimacionCobrosxtramites_AllRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_AllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_EstimacionCobrosxtramites_AllRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_AllRowDeleting(Me, New p_EstimacionCobrosxtramites_AllRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_AllRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_EstimacionCobrosxtramites_AllRow(ByVal row As p_EstimacionCobrosxtramites_AllRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_EstimacionCobrosxtramites_AllDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class p_EstimacionCobrosxtramites_ResumenDataTable
        Inherits Global.System.Data.TypedTableBase(Of p_EstimacionCobrosxtramites_ResumenRow)
        
        Private columnnumeroProy As Global.System.Data.DataColumn
        
        Private columnnumeroCont As Global.System.Data.DataColumn
        
        Private columnfechaR As Global.System.Data.DataColumn
        
        Private columnstatusproy As Global.System.Data.DataColumn
        
        Private columnnroRecibo As Global.System.Data.DataColumn
        
        Private columndescripcionProy As Global.System.Data.DataColumn
        
        Private columncliente As Global.System.Data.DataColumn
        
        Private columnsector As Global.System.Data.DataColumn
        
        Private columnidProy As Global.System.Data.DataColumn
        
        Private columnnroContrato As Global.System.Data.DataColumn
        
        Private columnfechafact As Global.System.Data.DataColumn
        
        Private columncuentaxcobrar As Global.System.Data.DataColumn
        
        Private columnmontoCobro As Global.System.Data.DataColumn
        
        Private columnserieCuenta As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "p_EstimacionCobrosxtramites_Resumen"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroContColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumeroCont
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusproyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatusproy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcionProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sectorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsector
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idProyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidProy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroContratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnroContrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechafactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechafact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuentaxcobrarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncuentaxcobrar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoCobroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoCobro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property serieCuentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserieCuenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As p_EstimacionCobrosxtramites_ResumenRow
            Get
                Return CType(Me.Rows(index),p_EstimacionCobrosxtramites_ResumenRow)
            End Get
        End Property
        
        Public Event p_EstimacionCobrosxtramites_ResumenRowChanging As p_EstimacionCobrosxtramites_ResumenRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramites_ResumenRowChanged As p_EstimacionCobrosxtramites_ResumenRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramites_ResumenRowDeleting As p_EstimacionCobrosxtramites_ResumenRowChangeEventHandler
        
        Public Event p_EstimacionCobrosxtramites_ResumenRowDeleted As p_EstimacionCobrosxtramites_ResumenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addp_EstimacionCobrosxtramites_ResumenRow(ByVal row As p_EstimacionCobrosxtramites_ResumenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addp_EstimacionCobrosxtramites_ResumenRow(ByVal numeroProy As String, ByVal numeroCont As String, ByVal fechaR As String, ByVal statusproy As String, ByVal nroRecibo As String, ByVal descripcionProy As String, ByVal cliente As String, ByVal sector As String, ByVal idProy As String, ByVal nroContrato As String, ByVal fechafact As String, ByVal cuentaxcobrar As Decimal, ByVal montoCobro As String, ByVal serieCuenta As String) As p_EstimacionCobrosxtramites_ResumenRow
            Dim rowp_EstimacionCobrosxtramites_ResumenRow As p_EstimacionCobrosxtramites_ResumenRow = CType(Me.NewRow,p_EstimacionCobrosxtramites_ResumenRow)
            Dim columnValuesArray() As Object = New Object() {numeroProy, numeroCont, fechaR, statusproy, nroRecibo, descripcionProy, cliente, sector, idProy, nroContrato, fechafact, cuentaxcobrar, montoCobro, serieCuenta}
            rowp_EstimacionCobrosxtramites_ResumenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowp_EstimacionCobrosxtramites_ResumenRow)
            Return rowp_EstimacionCobrosxtramites_ResumenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As p_EstimacionCobrosxtramites_ResumenDataTable = CType(MyBase.Clone,p_EstimacionCobrosxtramites_ResumenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New p_EstimacionCobrosxtramites_ResumenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumeroProy = MyBase.Columns("numeroProy")
            Me.columnnumeroCont = MyBase.Columns("numeroCont")
            Me.columnfechaR = MyBase.Columns("fechaR")
            Me.columnstatusproy = MyBase.Columns("statusproy")
            Me.columnnroRecibo = MyBase.Columns("nroRecibo")
            Me.columndescripcionProy = MyBase.Columns("descripcionProy")
            Me.columncliente = MyBase.Columns("cliente")
            Me.columnsector = MyBase.Columns("sector")
            Me.columnidProy = MyBase.Columns("idProy")
            Me.columnnroContrato = MyBase.Columns("nroContrato")
            Me.columnfechafact = MyBase.Columns("fechafact")
            Me.columncuentaxcobrar = MyBase.Columns("cuentaxcobrar")
            Me.columnmontoCobro = MyBase.Columns("montoCobro")
            Me.columnserieCuenta = MyBase.Columns("serieCuenta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumeroProy = New Global.System.Data.DataColumn("numeroProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroProy)
            Me.columnnumeroCont = New Global.System.Data.DataColumn("numeroCont", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumeroCont)
            Me.columnfechaR = New Global.System.Data.DataColumn("fechaR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaR)
            Me.columnstatusproy = New Global.System.Data.DataColumn("statusproy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatusproy)
            Me.columnnroRecibo = New Global.System.Data.DataColumn("nroRecibo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroRecibo)
            Me.columndescripcionProy = New Global.System.Data.DataColumn("descripcionProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcionProy)
            Me.columncliente = New Global.System.Data.DataColumn("cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncliente)
            Me.columnsector = New Global.System.Data.DataColumn("sector", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsector)
            Me.columnidProy = New Global.System.Data.DataColumn("idProy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidProy)
            Me.columnnroContrato = New Global.System.Data.DataColumn("nroContrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroContrato)
            Me.columnfechafact = New Global.System.Data.DataColumn("fechafact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechafact)
            Me.columncuentaxcobrar = New Global.System.Data.DataColumn("cuentaxcobrar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuentaxcobrar)
            Me.columnmontoCobro = New Global.System.Data.DataColumn("montoCobro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoCobro)
            Me.columnserieCuenta = New Global.System.Data.DataColumn("serieCuenta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserieCuenta)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newp_EstimacionCobrosxtramites_ResumenRow() As p_EstimacionCobrosxtramites_ResumenRow
            Return CType(Me.NewRow,p_EstimacionCobrosxtramites_ResumenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New p_EstimacionCobrosxtramites_ResumenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(p_EstimacionCobrosxtramites_ResumenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.p_EstimacionCobrosxtramites_ResumenRowChangedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_ResumenRowChanged(Me, New p_EstimacionCobrosxtramites_ResumenRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_ResumenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.p_EstimacionCobrosxtramites_ResumenRowChangingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_ResumenRowChanging(Me, New p_EstimacionCobrosxtramites_ResumenRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_ResumenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.p_EstimacionCobrosxtramites_ResumenRowDeletedEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_ResumenRowDeleted(Me, New p_EstimacionCobrosxtramites_ResumenRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_ResumenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.p_EstimacionCobrosxtramites_ResumenRowDeletingEvent) Is Nothing) Then
                RaiseEvent p_EstimacionCobrosxtramites_ResumenRowDeleting(Me, New p_EstimacionCobrosxtramites_ResumenRowChangeEvent(CType(e.Row,p_EstimacionCobrosxtramites_ResumenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removep_EstimacionCobrosxtramites_ResumenRow(ByVal row As p_EstimacionCobrosxtramites_ResumenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "p_EstimacionCobrosxtramites_ResumenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable1DataTable
        Inherits Global.System.Data.TypedTableBase(Of DataTable1Row)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
            Get
                Return CType(Me.Rows(index),DataTable1Row)
            End Get
        End Property
        
        Public Event DataTable1RowChanging As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowChanged As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleting As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleted As DataTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable1Row() As DataTable1Row
            Dim rowDataTable1Row As DataTable1Row = CType(Me.NewRow,DataTable1Row)
            Dim columnValuesArray() As Object = New Object() {Nothing}
            rowDataTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable1Row)
            Return rowDataTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable1DataTable = CType(MyBase.Clone,DataTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable1Row() As DataTable1Row
            Return CType(Me.NewRow,DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanged(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanging(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleted(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleting(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtSp = New dtSp
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_Carteratotalc_sReciboRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_Carteratotalc_sRecibo As p_Carteratotalc_sReciboDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_Carteratotalc_sRecibo = CType(Me.Table,p_Carteratotalc_sReciboDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_nroProyecto() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_nroProyectoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_nroProyecto' de la tabla 'p_Carteratotalc_sRecibo' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_nroProyectoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_descripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_descripcion' de la tabla 'p_Carteratotalc_sRecibo' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_descripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_DescripcionCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_DescripcionClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_DescripcionCliente' de la tabla 'p_Carteratotalc_sRec"& _ 
                            "ibo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_DescripcionClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_codCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_codClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_codCliente' de la tabla 'p_Carteratotalc_sRecibo' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_codClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.SectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sector' de la tabla 'p_Carteratotalc_sRecibo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.SectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_idProyecto() As Double
            Get
                Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_idProyectoColumn),Double)
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_idProyectoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_NroContrato() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_NroContratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_NroContrato' de la tabla 'p_Carteratotalc_sRecibo' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_NroContratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_NroFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_NroFacturaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_NroFactura' de la tabla 'p_Carteratotalc_sRecibo' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_NroFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pro_NroRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.pro_NroReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pro_NroRecibo' de la tabla 'p_Carteratotalc_sRecibo' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.pro_NroReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaCobrar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.CuentaCobrarColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CuentaCobrar' de la tabla 'p_Carteratotalc_sRecibo' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.CuentaCobrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.MontoPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoPago' de la tabla 'p_Carteratotalc_sRecibo' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.MontoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sRecibo.ReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Recibo' de la tabla 'p_Carteratotalc_sRecibo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sRecibo.ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_nroProyectoNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_nroProyectoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_nroProyectoNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_nroProyectoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_descripcionNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_descripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_descripcionNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_descripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_DescripcionClienteNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_DescripcionClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_DescripcionClienteNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_DescripcionClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_codClienteNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_codClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_codClienteNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_codClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectorNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.SectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectorNull()
            Me(Me.tablep_Carteratotalc_sRecibo.SectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_NroContratoNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_NroContratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_NroContratoNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_NroContratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_NroFacturaNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_NroFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_NroFacturaNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_NroFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispro_NroReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.pro_NroReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpro_NroReciboNull()
            Me(Me.tablep_Carteratotalc_sRecibo.pro_NroReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaCobrarNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.CuentaCobrarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaCobrarNull()
            Me(Me.tablep_Carteratotalc_sRecibo.CuentaCobrarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoPagoNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.MontoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoPagoNull()
            Me(Me.tablep_Carteratotalc_sRecibo.MontoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sRecibo.ReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReciboNull()
            Me(Me.tablep_Carteratotalc_sRecibo.ReciboColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_EstimacionCobrosxSectorRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_EstimacionCobrosxSector As p_EstimacionCobrosxSectorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_EstimacionCobrosxSector = CType(Me.Table,p_EstimacionCobrosxSectorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector.numeroProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroProy' de la tabla 'p_EstimacionCobrosxSector' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector.numeroProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector.descripcionProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionProy' de la tabla 'p_EstimacionCobrosxSector' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector.descripcionProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector.clienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cliente' de la tabla 'p_EstimacionCobrosxSector' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector.clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector.sectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sector' de la tabla 'p_EstimacionCobrosxSector' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector.sectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property anosAnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector.anosAntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'anosAnt' de la tabla 'p_EstimacionCobrosxSector' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector.anosAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '1' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '2' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '3' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '4' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '5' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '6' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '7' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '8' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _9() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._9Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '9' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '10' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '11' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSector._12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna '12' de la tabla 'p_EstimacionCobrosxSector' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSector._12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector.numeroProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroProyNull()
            Me(Me.tablep_EstimacionCobrosxSector.numeroProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector.descripcionProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionProyNull()
            Me(Me.tablep_EstimacionCobrosxSector.descripcionProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclienteNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector.clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclienteNull()
            Me(Me.tablep_EstimacionCobrosxSector.clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssectorNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector.sectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsectorNull()
            Me(Me.tablep_EstimacionCobrosxSector.sectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanosAntNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector.anosAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanosAntNull()
            Me(Me.tablep_EstimacionCobrosxSector.anosAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1Null()
            Me(Me.tablep_EstimacionCobrosxSector._1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2Null()
            Me(Me.tablep_EstimacionCobrosxSector._2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_3Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_3Null()
            Me(Me.tablep_EstimacionCobrosxSector._3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_4Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_4Null()
            Me(Me.tablep_EstimacionCobrosxSector._4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_5Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_5Null()
            Me(Me.tablep_EstimacionCobrosxSector._5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_6Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_6Null()
            Me(Me.tablep_EstimacionCobrosxSector._6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_7Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_7Null()
            Me(Me.tablep_EstimacionCobrosxSector._7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_8Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_8Null()
            Me(Me.tablep_EstimacionCobrosxSector._8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_9Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_9Null()
            Me(Me.tablep_EstimacionCobrosxSector._9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_10Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_10Null()
            Me(Me.tablep_EstimacionCobrosxSector._10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_11Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_11Null()
            Me(Me.tablep_EstimacionCobrosxSector._11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_12Null() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSector._12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_12Null()
            Me(Me.tablep_EstimacionCobrosxSector._12Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_EstimacionCobrosxSectorGobRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_EstimacionCobrosxSectorGob As p_EstimacionCobrosxSectorGobDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_EstimacionCobrosxSectorGob = CType(Me.Table,p_EstimacionCobrosxSectorGobDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.numeroProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroProy' de la tabla 'p_EstimacionCobrosxSectorGob' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.numeroProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.descripcionProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionProy' de la tabla 'p_EstimacionCobrosxSectorGo"& _ 
                            "b' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.descripcionProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.clienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cliente' de la tabla 'p_EstimacionCobrosxSectorGob' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.sectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sector' de la tabla 'p_EstimacionCobrosxSectorGob' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.sectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property anosAnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.anosAntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'anosAnt' de la tabla 'p_EstimacionCobrosxSectorGob' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.anosAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieCuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.serieCuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serieCuenta' de la tabla 'p_EstimacionCobrosxSectorGob' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.serieCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroCont() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.numeroContColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroCont' de la tabla 'p_EstimacionCobrosxSectorGob' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.numeroContColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaR() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.fechaRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaR' de la tabla 'p_EstimacionCobrosxSectorGob' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.fechaRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property statusproy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.statusproyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'statusproy' de la tabla 'p_EstimacionCobrosxSectorGob' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.statusproyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.nroReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroRecibo' de la tabla 'p_EstimacionCobrosxSectorGob' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.nroReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enero() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.EneroColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Enero' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.EneroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Febr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.FebrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Febr' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.FebrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marzo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.MarzoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Marzo' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.MarzoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abril() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.AbrilColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abril' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.AbrilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mayo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.MayoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mayo' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.MayoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Junio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.JunioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Junio' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.JunioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Julio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.JulioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Julio' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.JulioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Agosto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.AgostoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Agosto' de la tabla 'p_EstimacionCobrosxSectorGob' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.AgostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sept() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.SeptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sept' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.SeptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oct() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.OctColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Oct' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.OctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nov() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.NovColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nov' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.NovColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dic() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxSectorGob.DicColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dic' de la tabla 'p_EstimacionCobrosxSectorGob' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxSectorGob.DicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.numeroProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroProyNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.numeroProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.descripcionProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionProyNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.descripcionProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclienteNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclienteNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssectorNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.sectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsectorNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.sectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanosAntNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.anosAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanosAntNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.anosAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieCuentaNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.serieCuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieCuentaNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.serieCuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroContNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.numeroContColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroContNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.numeroContColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaRNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.fechaRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaRNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.fechaRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstatusproyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.statusproyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstatusproyNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.statusproyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.nroReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroReciboNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.nroReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEneroNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.EneroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEneroNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.EneroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFebrNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.FebrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFebrNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.FebrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarzoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.MarzoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarzoNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.MarzoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbrilNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.AbrilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbrilNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.AbrilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMayoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.MayoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMayoNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.MayoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJunioNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.JunioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJunioNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.JunioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJulioNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.JulioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJulioNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.JulioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgostoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.AgostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgostoNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.AgostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeptNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.SeptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeptNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.SeptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOctNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.OctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOctNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.OctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNovNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.NovColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNovNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.NovColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDicNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxSectorGob.DicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDicNull()
            Me(Me.tablep_EstimacionCobrosxSectorGob.DicColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_EstimacionCobrosxtramitesRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_EstimacionCobrosxtramites As p_EstimacionCobrosxtramitesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_EstimacionCobrosxtramites = CType(Me.Table,p_EstimacionCobrosxtramitesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.numeroProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroProy' de la tabla 'p_EstimacionCobrosxtramites' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.numeroProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.descripcionProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionProy' de la tabla 'p_EstimacionCobrosxtramites"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.descripcionProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.clienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cliente' de la tabla 'p_EstimacionCobrosxtramites' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.sectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sector' de la tabla 'p_EstimacionCobrosxtramites' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.sectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property anosAnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.anosAntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'anosAnt' de la tabla 'p_EstimacionCobrosxtramites' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.anosAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieCuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.serieCuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serieCuenta' de la tabla 'p_EstimacionCobrosxtramites' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.serieCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroCont() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.numeroContColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroCont' de la tabla 'p_EstimacionCobrosxtramites' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.numeroContColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaR() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.fechaRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaR' de la tabla 'p_EstimacionCobrosxtramites' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.fechaRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property statusproy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.statusproyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'statusproy' de la tabla 'p_EstimacionCobrosxtramites' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.statusproyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.nroReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroRecibo' de la tabla 'p_EstimacionCobrosxtramites' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.nroReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enero() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.EneroColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Enero' de la tabla 'p_EstimacionCobrosxtramites' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.EneroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Febr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.FebrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Febr' de la tabla 'p_EstimacionCobrosxtramites' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.FebrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Marzo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.MarzoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Marzo' de la tabla 'p_EstimacionCobrosxtramites' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.MarzoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abril() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.AbrilColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abril' de la tabla 'p_EstimacionCobrosxtramites' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.AbrilColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mayo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.MayoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mayo' de la tabla 'p_EstimacionCobrosxtramites' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.MayoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Junio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.JunioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Junio' de la tabla 'p_EstimacionCobrosxtramites' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.JunioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Julio() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.JulioColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Julio' de la tabla 'p_EstimacionCobrosxtramites' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.JulioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Agosto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.AgostoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Agosto' de la tabla 'p_EstimacionCobrosxtramites' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.AgostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sept() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.SeptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sept' de la tabla 'p_EstimacionCobrosxtramites' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.SeptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oct() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.OctColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Oct' de la tabla 'p_EstimacionCobrosxtramites' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.OctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nov() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.NovColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nov' de la tabla 'p_EstimacionCobrosxtramites' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.NovColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dic() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites.DicColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dic' de la tabla 'p_EstimacionCobrosxtramites' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites.DicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.numeroProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites.numeroProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.descripcionProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites.descripcionProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclienteNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclienteNull()
            Me(Me.tablep_EstimacionCobrosxtramites.clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssectorNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.sectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsectorNull()
            Me(Me.tablep_EstimacionCobrosxtramites.sectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanosAntNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.anosAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanosAntNull()
            Me(Me.tablep_EstimacionCobrosxtramites.anosAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieCuentaNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.serieCuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieCuentaNull()
            Me(Me.tablep_EstimacionCobrosxtramites.serieCuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroContNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.numeroContColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroContNull()
            Me(Me.tablep_EstimacionCobrosxtramites.numeroContColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaRNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.fechaRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaRNull()
            Me(Me.tablep_EstimacionCobrosxtramites.fechaRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstatusproyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.statusproyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstatusproyNull()
            Me(Me.tablep_EstimacionCobrosxtramites.statusproyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.nroReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroReciboNull()
            Me(Me.tablep_EstimacionCobrosxtramites.nroReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEneroNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.EneroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEneroNull()
            Me(Me.tablep_EstimacionCobrosxtramites.EneroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFebrNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.FebrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFebrNull()
            Me(Me.tablep_EstimacionCobrosxtramites.FebrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarzoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.MarzoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarzoNull()
            Me(Me.tablep_EstimacionCobrosxtramites.MarzoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbrilNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.AbrilColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbrilNull()
            Me(Me.tablep_EstimacionCobrosxtramites.AbrilColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMayoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.MayoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMayoNull()
            Me(Me.tablep_EstimacionCobrosxtramites.MayoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJunioNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.JunioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJunioNull()
            Me(Me.tablep_EstimacionCobrosxtramites.JunioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJulioNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.JulioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJulioNull()
            Me(Me.tablep_EstimacionCobrosxtramites.JulioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgostoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.AgostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgostoNull()
            Me(Me.tablep_EstimacionCobrosxtramites.AgostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeptNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.SeptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeptNull()
            Me(Me.tablep_EstimacionCobrosxtramites.SeptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOctNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.OctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOctNull()
            Me(Me.tablep_EstimacionCobrosxtramites.OctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNovNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.NovColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNovNull()
            Me(Me.tablep_EstimacionCobrosxtramites.NovColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDicNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites.DicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDicNull()
            Me(Me.tablep_EstimacionCobrosxtramites.DicColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_Carteratotalc_sR_sRecibo_ResRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_Carteratotalc_sR_sRecibo_Res As p_Carteratotalc_sR_sRecibo_ResDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_Carteratotalc_sR_sRecibo_Res = CType(Me.Table,p_Carteratotalc_sR_sRecibo_ResDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.SectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sector' de la tabla 'p_Carteratotalc_sR_sRecibo_Res' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.SectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.ReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Recibo' de la tabla 'p_Carteratotalc_sR_sRecibo_Res' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.ReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoPago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.MontoPagoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoPago' de la tabla 'p_Carteratotalc_sR_sRecibo_Res' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.MontoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSectorNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sR_sRecibo_Res.SectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSectorNull()
            Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.SectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sR_sRecibo_Res.ReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReciboNull()
            Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.ReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoPagoNull() As Boolean
            Return Me.IsNull(Me.tablep_Carteratotalc_sR_sRecibo_Res.MontoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoPagoNull()
            Me(Me.tablep_Carteratotalc_sR_sRecibo_Res.MontoPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_EstimacionCobrosxtramites_AllRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_EstimacionCobrosxtramites_All As p_EstimacionCobrosxtramites_AllDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_EstimacionCobrosxtramites_All = CType(Me.Table,p_EstimacionCobrosxtramites_AllDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.numeroProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroProy' de la tabla 'p_EstimacionCobrosxtramites_All'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.numeroProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.descripcionProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionProy' de la tabla 'p_EstimacionCobrosxtramites"& _ 
                            "_All' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.descripcionProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.clienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cliente' de la tabla 'p_EstimacionCobrosxtramites_All' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.sectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sector' de la tabla 'p_EstimacionCobrosxtramites_All' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.sectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property anosAnt() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.anosAntColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'anosAnt' de la tabla 'p_EstimacionCobrosxtramites_All' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.anosAntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieCuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.serieCuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serieCuenta' de la tabla 'p_EstimacionCobrosxtramites_All"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.serieCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroCont() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.numeroContColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroCont' de la tabla 'p_EstimacionCobrosxtramites_All'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.numeroContColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaR() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.fechaRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaR' de la tabla 'p_EstimacionCobrosxtramites_All' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.fechaRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property statusproy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.statusproyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'statusproy' de la tabla 'p_EstimacionCobrosxtramites_All'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.statusproyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.nroReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroRecibo' de la tabla 'p_EstimacionCobrosxtramites_All' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.nroReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ene() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.EneColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ene' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.EneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Febr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.FebrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Febr' de la tabla 'p_EstimacionCobrosxtramites_All' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.FebrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.MarColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mar' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.MarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.AbrColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abr' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.AbrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property May() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.MayColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'May' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.MayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jun() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.JunColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Jun' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.JunColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jul() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.JulColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Jul' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.JulColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ago() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.AgoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ago' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.AgoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sept() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.SeptColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sept' de la tabla 'p_EstimacionCobrosxtramites_All' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.SeptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Oct() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.OctColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Oct' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.OctColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nov() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.NovColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nov' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.NovColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dic() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.DicColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dic' de la tabla 'p_EstimacionCobrosxtramites_All' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.DicColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_All.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'p_EstimacionCobrosxtramites_All' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_All.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.numeroProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.numeroProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.descripcionProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.descripcionProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclienteNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclienteNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssectorNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.sectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsectorNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.sectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanosAntNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.anosAntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanosAntNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.anosAntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieCuentaNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.serieCuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieCuentaNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.serieCuentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroContNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.numeroContColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroContNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.numeroContColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaRNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.fechaRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaRNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.fechaRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstatusproyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.statusproyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstatusproyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.statusproyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.nroReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroReciboNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.nroReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEneNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.EneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEneNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.EneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFebrNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.FebrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFebrNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.FebrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.MarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.MarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbrNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.AbrColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbrNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.AbrColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMayNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.MayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMayNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.MayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJunNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.JunColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJunNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.JunColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJulNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.JulColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJulNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.JulColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.AgoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgoNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.AgoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeptNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.SeptColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeptNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.SeptColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOctNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.OctColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOctNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.OctColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNovNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.NovColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNovNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.NovColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDicNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.DicColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDicNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.DicColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_All.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablep_EstimacionCobrosxtramites_All.TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class p_EstimacionCobrosxtramites_ResumenRow
        Inherits Global.System.Data.DataRow
        
        Private tablep_EstimacionCobrosxtramites_Resumen As p_EstimacionCobrosxtramites_ResumenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablep_EstimacionCobrosxtramites_Resumen = CType(Me.Table,p_EstimacionCobrosxtramites_ResumenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroProy' de la tabla 'p_EstimacionCobrosxtramites_Resu"& _ 
                            "men' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numeroCont() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroContColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'numeroCont' de la tabla 'p_EstimacionCobrosxtramites_Resu"& _ 
                            "men' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroContColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaR() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.fechaRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaR' de la tabla 'p_EstimacionCobrosxtramites_Resumen'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.fechaRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property statusproy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.statusproyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'statusproy' de la tabla 'p_EstimacionCobrosxtramites_Resu"& _ 
                            "men' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.statusproyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroRecibo() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.nroReciboColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroRecibo' de la tabla 'p_EstimacionCobrosxtramites_Resum"& _ 
                            "en' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.nroReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcionProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.descripcionProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcionProy' de la tabla 'p_EstimacionCobrosxtramites"& _ 
                            "_Resumen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.descripcionProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.clienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cliente' de la tabla 'p_EstimacionCobrosxtramites_Resumen"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sector() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.sectorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sector' de la tabla 'p_EstimacionCobrosxtramites_Resumen'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.sectorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idProy() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.idProyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idProy' de la tabla 'p_EstimacionCobrosxtramites_Resumen'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.idProyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroContrato() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.nroContratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nroContrato' de la tabla 'p_EstimacionCobrosxtramites_Res"& _ 
                            "umen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.nroContratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechafact() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.fechafactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechafact' de la tabla 'p_EstimacionCobrosxtramites_Resum"& _ 
                            "en' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.fechafactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuentaxcobrar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.cuentaxcobrarColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cuentaxcobrar' de la tabla 'p_EstimacionCobrosxtramites_R"& _ 
                            "esumen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.cuentaxcobrarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoCobro() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.montoCobroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoCobro' de la tabla 'p_EstimacionCobrosxtramites_Resu"& _ 
                            "men' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.montoCobroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property serieCuenta() As String
            Get
                Try 
                    Return CType(Me(Me.tablep_EstimacionCobrosxtramites_Resumen.serieCuentaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'serieCuenta' de la tabla 'p_EstimacionCobrosxtramites_Res"& _ 
                            "umen' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablep_EstimacionCobrosxtramites_Resumen.serieCuentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumeroContNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroContColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumeroContNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.numeroContColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaRNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.fechaRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaRNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.fechaRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstatusproyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.statusproyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstatusproyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.statusproyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroReciboNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.nroReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroReciboNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.nroReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.descripcionProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.descripcionProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclienteNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.clienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclienteNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.clienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssectorNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.sectorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsectorNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.sectorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidProyNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.idProyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidProyNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.idProyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroContratoNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.nroContratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroContratoNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.nroContratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechafactNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.fechafactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechafactNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.fechafactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscuentaxcobrarNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.cuentaxcobrarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcuentaxcobrarNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.cuentaxcobrarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoCobroNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.montoCobroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoCobroNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.montoCobroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsserieCuentaNull() As Boolean
            Return Me.IsNull(Me.tablep_EstimacionCobrosxtramites_Resumen.serieCuentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetserieCuentaNull()
            Me(Me.tablep_EstimacionCobrosxtramites_Resumen.serieCuentaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable1 As DataTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable1 = CType(Me.Table,DataTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableDataTable1.idColumn),Integer)
            End Get
            Set
                Me(Me.tableDataTable1.idColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_Carteratotalc_sReciboRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_Carteratotalc_sReciboRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_Carteratotalc_sReciboRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_Carteratotalc_sReciboRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_EstimacionCobrosxSectorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_EstimacionCobrosxSectorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_EstimacionCobrosxSectorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_EstimacionCobrosxSectorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_EstimacionCobrosxSectorGobRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_EstimacionCobrosxSectorGobRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_EstimacionCobrosxSectorGobRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_EstimacionCobrosxSectorGobRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_EstimacionCobrosxtramitesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_EstimacionCobrosxtramitesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_EstimacionCobrosxtramitesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_EstimacionCobrosxtramitesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_Carteratotalc_sR_sRecibo_ResRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_Carteratotalc_sR_sRecibo_ResRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_Carteratotalc_sR_sRecibo_ResRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_Carteratotalc_sR_sRecibo_ResRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_EstimacionCobrosxtramites_AllRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_EstimacionCobrosxtramites_AllRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_EstimacionCobrosxtramites_AllRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_EstimacionCobrosxtramites_AllRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class p_EstimacionCobrosxtramites_ResumenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As p_EstimacionCobrosxtramites_ResumenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As p_EstimacionCobrosxtramites_ResumenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As p_EstimacionCobrosxtramites_ResumenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dtSpTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_Carteratotalc_sReciboTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "p_Carteratotalc_sRecibo"
            tableMapping.ColumnMappings.Add("pro_nroProyecto", "pro_nroProyecto")
            tableMapping.ColumnMappings.Add("pro_descripcion", "pro_descripcion")
            tableMapping.ColumnMappings.Add("pro_DescripcionCliente", "pro_DescripcionCliente")
            tableMapping.ColumnMappings.Add("pro_codCliente", "pro_codCliente")
            tableMapping.ColumnMappings.Add("Sector", "Sector")
            tableMapping.ColumnMappings.Add("pro_idProyecto", "pro_idProyecto")
            tableMapping.ColumnMappings.Add("pro_NroContrato", "pro_NroContrato")
            tableMapping.ColumnMappings.Add("pro_NroFactura", "pro_NroFactura")
            tableMapping.ColumnMappings.Add("pro_NroRecibo", "pro_NroRecibo")
            tableMapping.ColumnMappings.Add("CuentaCobrar", "CuentaCobrar")
            tableMapping.ColumnMappings.Add("MontoPago", "MontoPago")
            tableMapping.ColumnMappings.Add("Recibo", "Recibo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_Carteratotalc_sRecibo""(?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@cliente", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_Carteratotalc_sReciboDataTable, ByVal __sector As String, ByVal __cliente As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__sector,String)
            End If
            If (__cliente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__cliente,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __sector As String, ByVal __cliente As String) As dtSp.p_Carteratotalc_sReciboDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__sector,String)
            End If
            If (__cliente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__cliente,String)
            End If
            Dim dataTable As dtSp.p_Carteratotalc_sReciboDataTable = New dtSp.p_Carteratotalc_sReciboDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_EstimacionCobrosxSectorTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_EstimacionCobrosxSector""(?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@year", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_EstimacionCobrosxSectorDataTable, ByVal __year As String, ByVal __sector As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __year As String, ByVal __sector As String) As dtSp.p_EstimacionCobrosxSectorDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            Dim dataTable As dtSp.p_EstimacionCobrosxSectorDataTable = New dtSp.p_EstimacionCobrosxSectorDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_EstimacionCobrosxSectorGobTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_EstimacionCobrosxSectorGob""(?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@year", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_EstimacionCobrosxSectorGobDataTable, ByVal __year As String, ByVal __sector As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __year As String, ByVal __sector As String) As dtSp.p_EstimacionCobrosxSectorGobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            Dim dataTable As dtSp.p_EstimacionCobrosxSectorGobDataTable = New dtSp.p_EstimacionCobrosxSectorGobDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_EstimacionCobrosxtramitesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_EstimacionCobrosxtramites""(?, ?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@year", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@status", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_EstimacionCobrosxtramitesDataTable, ByVal __year As String, ByVal __sector As String, ByVal __status As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (__status Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(__status,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __year As String, ByVal __sector As String, ByVal __status As String) As dtSp.p_EstimacionCobrosxtramitesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (__status Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(__status,String)
            End If
            Dim dataTable As dtSp.p_EstimacionCobrosxtramitesDataTable = New dtSp.p_EstimacionCobrosxtramitesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_Carteratotalc_sR_sRecibo_ResTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_Carteratotalc_sR_sRecibo_Res""(?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@cliente", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_Carteratotalc_sR_sRecibo_ResDataTable, ByVal __sector As String, ByVal __cliente As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__sector,String)
            End If
            If (__cliente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__cliente,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __sector As String, ByVal __cliente As String) As dtSp.p_Carteratotalc_sR_sRecibo_ResDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__sector,String)
            End If
            If (__cliente Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__cliente,String)
            End If
            Dim dataTable As dtSp.p_Carteratotalc_sR_sRecibo_ResDataTable = New dtSp.p_Carteratotalc_sR_sRecibo_ResDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_EstimacionCobrosxtramites_AllTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_EstimacionCobrosxtramites_All""(?, ?, ?, ?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@year", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@Cuenta", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@PorFecha", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@Per", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_EstimacionCobrosxtramites_AllDataTable, ByVal __year As String, ByVal __sector As String, ByVal __Cuenta As String, ByVal __PorFecha As Global.System.Nullable(Of Integer), ByVal __Per As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (__Cuenta Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(__Cuenta,String)
            End If
            If (__PorFecha.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(__PorFecha.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__Per.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(__Per.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __year As String, ByVal __sector As String, ByVal __Cuenta As String, ByVal __PorFecha As Global.System.Nullable(Of Integer), ByVal __Per As Global.System.Nullable(Of Integer)) As dtSp.p_EstimacionCobrosxtramites_AllDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__year Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__year,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (__Cuenta Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(__Cuenta,String)
            End If
            If (__PorFecha.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(__PorFecha.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__Per.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(__Per.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dtSp.p_EstimacionCobrosxtramites_AllDataTable = New dtSp.p_EstimacionCobrosxtramites_AllDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class p_EstimacionCobrosxtramites_ResumenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "{? = CALL ""dbo"".""p_EstimacionCobrosxtramites_Resumen""(?, ?, ?, ?)}"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@RETURN_VALUE", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.ReturnValue, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@fecha", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@sector", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@status", Global.System.Data.Odbc.OdbcType.NVarChar, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(255,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.Odbc.OdbcParameter("@PorFecha", Global.System.Data.Odbc.OdbcType.Int, 2147483647, Global.System.Data.ParameterDirection.Input, CType(255,Byte), CType(0,Byte), Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.p_EstimacionCobrosxtramites_ResumenDataTable, ByVal __fecha As String, ByVal __sector As String, ByVal __status As String, ByVal __PorFecha As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__fecha Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__fecha,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (__status Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(__status,String)
            End If
            If (__PorFecha.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(__PorFecha.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal __fecha As String, ByVal __sector As String, ByVal __status As String, ByVal __PorFecha As Global.System.Nullable(Of Integer)) As dtSp.p_EstimacionCobrosxtramites_ResumenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (__fecha Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(__fecha,String)
            End If
            If (__sector Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(__sector,String)
            End If
            If (__status Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(__status,String)
            End If
            If (__PorFecha.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(__PorFecha.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As dtSp.p_EstimacionCobrosxtramites_ResumenDataTable = New dtSp.p_EstimacionCobrosxtramites_ResumenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataTable1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.Odbc.OdbcDataAdapter
        
        Private _connection As Global.System.Data.Odbc.OdbcConnection
        
        Private _transaction As Global.System.Data.Odbc.OdbcTransaction
        
        Private _commandCollection() As Global.System.Data.Odbc.OdbcCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.Odbc.OdbcDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.Odbc.OdbcConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.Odbc.OdbcCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.Odbc.OdbcTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.Odbc.OdbcCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.Odbc.OdbcDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DataTable1"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.Odbc.OdbcConnection
            Me._connection.ConnectionString = Global.ControlProyectos.My.MySettings.Default.ControlProyectosConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.Odbc.OdbcCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.Odbc.OdbcCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        dbo.tab_selection.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            dbo.tab_selection"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtSp.DataTable1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dtSp.DataTable1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dtSp.DataTable1DataTable = New dtSp.DataTable1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dtSp, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dtSp, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dtSp, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dtSp) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
